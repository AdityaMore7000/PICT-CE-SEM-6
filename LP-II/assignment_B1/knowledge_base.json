{
  "questions": [
    {
      "question": "What is React?",
      "answer": "React is a JavaScript library for building user interfaces. It was developed by Facebook."
    },
    {
      "question": "What is JSX?",
      "answer": "JSX stands for JavaScript XML. It is a syntax extension for JavaScript, used by React to describe what the UI should look like."
    },
    {
      "question": "What are components in React?",
      "answer": "Components are independent and reusable bits of code in React. They serve as the building blocks of any React application."
    },
    {
      "question": "What is the virtual DOM?",
      "answer": "The virtual DOM (VDOM) is a programming concept where an ideal, or 'virtual', representation of a UI is kept in memory and synced with the 'real' DOM."
    },
    {
      "question": "What are props in React?",
      "answer": "Props is short for properties. In React, props are used to pass data from parent to child components."
    },
    {
      "question": "What is state in React?",
      "answer": "State is a built-in object in React that contains data about the component. The data in the state object can change over time."
    },
    {
      "question": "What are hooks in React?",
      "answer": "Hooks are a new addition in React 16.8 that let you use state and other React features without writing a class."
    },
    {
      "question": "What is a key in React?",
      "answer": "A 'key' is a special string attribute you need to include when creating lists of elements in React."
    },
    {
      "question": "What is a higher-order component?",
      "answer": "A higher-order component (HOC) in React is a pattern derived from React’s compositional nature. HOCs are a function that takes a component and returns a new component."
    },
    {
      "question": "What is context in React?",
      "answer": "Context provides a way to pass data through the component tree without having to pass props down manually at every level."
    },
    {
      "question": "What is Redux?",
      "answer": "Redux is a predictable state container for JavaScript apps. It helps you write applications that behave consistently, run in different environments, and are easy to test."
    },
    {
      "question": "What is React Router?",
      "answer": "React Router is a standard library for routing in React. It enables the navigation among views of various components in a React Application, allows changing the browser URL, and keeps UI in sync with the URL."
    },
    {
      "question": "What is a controlled component?",
      "answer": "In React, a controlled component is a component that controls the input elements within the forms on subsequent user input."
    },
    {
      "question": "What is an uncontrolled component?",
      "answer": "An uncontrolled component is one that stores its own state internally, and you query the DOM using a ref to find its current value when you need it."},
      {
        "question": "What is a key in React?",
        "answer": "A 'key' is a special string attribute you need to include when creating lists of elements in React."
      },
      {
        "question": "What is a higher-order component?",
        "answer": "A higher-order component (HOC) in React is a pattern derived from React’s compositional nature. HOCs are a function that takes a component and returns a new component."
      },
      {
        "question": "What is context in React?",
        "answer": "Context provides a way to pass data through the component tree without having to pass props down manually at every level."
      },
      {
        "question": "What is Redux?",
        "answer": "Redux is a predictable state container for JavaScript apps. It helps you write applications that behave consistently, run in different environments, and are easy to test."
      },
      {
        "question": "What is React Router?",
        "answer": "React Router is a standard library for routing in React. It enables the navigation among views of various components in a React Application, allows changing the browser URL, and keeps UI in sync with the URL."
      },
      {
        "question": "What is a controlled component?",
        "answer": "In React, a controlled component is a component that controls the input elements within the forms on subsequent user input."
      },
      {
        "question": "What is an uncontrolled component?",
        "answer": "An uncontrolled component is one that stores its own state internally, and you query the DOM using a ref to find its current value when you need it."
      },
      {
        "question": "What is the use of refs?",
        "answer": "Refs are used to return a reference to an element. They should be avoided in most cases, however, they can be useful when you need direct access to a DOM element or an instance of a component."
      },
      {
        "question": "What is a fragment?",
        "answer": "It's a common pattern in React which allows a component to return multiple elements. Fragments let you group a list of children without adding extra nodes to the DOM."
      },
      {
        "question": "What is the purpose of render method in React?",
        "answer": "Each React component must have a render method. It returns a single React element which is the representation of the native DOM component."
      },
      {
        "question": "What is the purpose of super(props)?",
        "answer": "super(props) is used to call the constructor of the parent class and to pass props to the parent constructor to make them available in the component."
      },
      {
        "question": "What is the use of arrow functions in React?",
        "answer": "Arrow functions are used to make 'this' keyword to always represent the object that defined the arrow function. It is useful when you want to access component's properties within an event handler."
      },
      {
        "question": "What is React Fiber?",
        "answer": "Fiber is the new reconciliation engine in React 16. Its main goal is to enable incremental rendering - the ability to split rendering work into chunks and spread it out over multiple frames."
      },
      {
        "question": "What is the difference between state and props?",
        "answer": "The state is a data structure that starts with a default value when a Component mounts. It may be mutated across time. Props (short for properties) are a Component's configuration. They are received from above and immutable."
      },
      {
        "question": "What is the difference between a class component and functional component?",
        "answer": "Class components allows you to use additional features such as local state and lifecycle hooks. Also, you can use the 'shouldComponentUpdate' lifecycle method to optimize your component. Functional components are simpler and easier to test in comparison to class components."
      },
      {
        "question": "What is the lifecycle of a component in React?",
        "answer": "Each component in React has a lifecycle which you can monitor and manipulate during its three main phases. The three phases are: Mounting, Updating, and Unmounting."
      },
      {
        "question": "What is prop drilling and how can you avoid it?",
        "answer": "Prop drilling is the process in React of getting data from one part of the React component tree to another by passing props through intermediate components. Context API or Redux can be used to avoid prop drilling."
      },
      {
        "question": "What is the use of the spread operator in React?",
        "answer": "The spread operator can be used to take in an unlimited number of arguments as an array. It is used in React to merge the state and to add items to the state."
      },
    {
      "question": "What is the use of refs?",
      "answer": "Refs are used to return a reference to an element. They should be avoided in most cases, however, they can be useful when you need direct access to a DOM element or an instance of a component."
    },
    {
      "question": "What is a fragment?",
      "answer": "It's a common pattern in React which allows a component to return multiple elements. Fragments let you group a list of children without adding extra nodes to the DOM."
    },
    {
      "question": "What is the purpose of render method in React?",
      "answer": "Each React component must have a render method. It returns a single React element which is the representation of the native DOM component."
    },
    {
      "question": "What is the purpose of super(props)?",
      "answer": "super(props) is used to call the constructor of the parent class and to pass props to the parent constructor to make them available in the component."
    },
    {
      "question": "What is the use of arrow functions in React?",
      "answer": "Arrow functions are used to make 'this' keyword to always represent the object that defined the arrow function. It is useful when you want to access component's properties within an event handler."
    },
    {
      "question": "What is React Fiber?",
      "answer": "Fiber is the new reconciliation engine in React 16. Its main goal is to enable incremental rendering - the ability to split rendering work into chunks and spread it out over multiple frames."
    },
    {
      "question": "What is the difference between state and props?",
      "answer": "The state is a data structure that starts with a default value when a Component mounts. It may be mutated across time. Props (short for properties) are a Component's configuration. They are received from above and immutable."
    },
    {
      "question": "What is the difference between a class component and functional component?",
      "answer": "Class components allows you to use additional features such as local state and lifecycle hooks. Also, you can use the 'shouldComponentUpdate' lifecycle method to optimize your component. Functional components are simpler and easier to test in comparison to class components."
    },
    {
      "question": "What is the lifecycle of a component in React?",
      "answer": "Each component in React has a lifecycle which you can monitor and manipulate during its three main phases. The three phases are: Mounting, Updating, and Unmounting."
    },
    {
      "question": "What is prop drilling and how can you avoid it?",
      "answer": "Prop drilling is the process in React of getting data from one part of the React component tree to another by passing props through intermediate components. Context API or Redux can be used to avoid prop drilling."
    },
    {
      "question": "What is the use of the spread operator in React?",
      "answer": "The spread operator can be used to take in an unlimited number of arguments as an array. It is used in React to merge the state and to add items to the state."
    }
  ]
}